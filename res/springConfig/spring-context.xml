<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/tx   
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!--log4j config-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean" >
        <property name="targetClass" value="org.springframework.util.Log4jConfigurer" />
        <property name="targetMethod" value="initLogging" />
        <property name="arguments">
            <list>
                <value>file:res/gameConfig/log4j.properties</value>
            </list>
        </property>
    </bean> 

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
          <list>
              <value>file:res/gameConfig/jdbc.properties</value>
              <value>file:res/gameConfig/redis.properties</value>
              <value>file:res/gameConfig/jredis.properties</value>
              <value>file:res/gameConfig/memcache.properties</value>
          </list>
        </property>
    </bean>
<!-- 创建数据源 C3P0 可根据自己的需求换连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driver}" />
		<property name="jdbcUrl" value="${url}" />
		<property name="user" value="${username}" />
		<property name="password" value="${password}" />
		<property name="preferredTestQuery" value="select id from C3P0TestTable where id=1" />
		<property name="initialPoolSize" value="10" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="200" />
		<property name="maxIdleTime" value="180" />
		<property name="acquireIncrement" value="5" />
		<property name="idleConnectionTestPeriod" value="60" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
		<property name="numHelperThreads" value="10" />
		<property name="maxStatements" value="0" />
	</bean>
	<!-- (事务管理)transaction manager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- spring AOP设置 -->
	<aop:config>
	    <!-- 在哪些位置加入pc-->
		<aop:pointcut id="pc"
			expression="execution(* com.koogame.service.*.*(..))" /> <!-- 把事务控制在service层 (..) 标示任一参数 -->
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>
	

	<!-- 创建SqlSessionFactory,同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.koogame.bean" />
	</bean>

	<!-- 可通过注解控制事务 -->
	<tx:annotation-driven />

	<!--MapperScannerConfigurer配置-->
	<!--basePackage指定要扫描的包，在此包之下的映射器都会被  
     搜索到。可指定多个包，包与包之间用逗号或分号分隔-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.koogame.mapper" />
	</bean> 
	
	<!-- 自动扫描注入文件 -->
	<context:component-scan base-package="com.koogame" />  
	 <!--其中base-package为需要扫描的包（含所有子包）
     @Service用于标注业务层组件，
     @Controller用于标注控制层组件（如struts中的action）,
     @Repository用于标注数据访问组件，即DAO组件，
     @Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。
    -->
	<!--定时任务配置--> 
	<import resource="spring-jredis.xml"/>
    <import resource="spring-redis.xml"/> 
    

</beans>